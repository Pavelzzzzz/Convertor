import exception.CountValues;
import exception.PKException;
import exception.TableNameException;
import service.Worker;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Map;

public class main extends JDialog {
    private JPanel contentPane;
    private JButton buttonOK;
    private JTextArea textArea1;
    private JTextArea textArea2;
    private final String DEFAULT_TEXT_OF_SQL_COMMAND = "\n" +
            "INSERT INTO DbName.TableName\n" +
            "           (CategoryId\n" +
            "           ,CategoryName\n" +
            "           ,CreatedBy\n" +
            "           ,CreatedDateTime\n" +
            "           ,LastUpdateBy\n" +
            "           ,LastUpdateDateTime)\n" +
            "     VALUES\n" +
            "           (2\n" +
            "           ,'template'\n" +
            "           ,CURRENT_USER\n" +
            "           ,'2017-01-01 00:00:00.0000000'\n" +
            "           ,NULL\n" +
            "           ,NULL);";

    public main() {
        setContentPane(contentPane);
        setModal(true);
        getRootPane().setDefaultButton(buttonOK);
        textArea1.setText(DEFAULT_TEXT_OF_SQL_COMMAND);

        buttonOK.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onOK();
            }
        });
    }

    private void onOK() {
        // add your code here
        textArea2.setForeground(Color.black);

        Worker worker = new Worker();

        StringBuilder out = new StringBuilder();

        for (String insertCommand
                : textArea1.getText().split("(?<=;)")) {

            try {

                int startTableName = insertCommand.indexOf("INTO ") + 5;
                String tableName = insertCommand.substring(
                        startTableName,
                        insertCommand.indexOf(' ', startTableName));

                Map<String, String> fields = worker.getFieldsFromCommand(insertCommand, startTableName);

                out.append(worker.toFlywayFormat(tableName, fields) + '\n' + '\n');
            } catch (CountValues countValues) {
                textArea2.setText(
                        "The number of fields must be equal to the number of values");
                textArea2.setForeground(Color.red);
            } catch (PKException e) {
                textArea2.setText(
                        "No PK field found");
                textArea2.setForeground(Color.red);
            } catch (TableNameException e) {
                textArea2.setText(
                        "Error. Table name is not valid");
                textArea2.setForeground(Color.red);
            }
        }

        textArea2.setText(out.toString());

        //dispose();
    }

    public static void main(String[] args) {
        main dialog = new main();
        dialog.pack();
        dialog.setVisible(true);
        System.exit(0);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 3, new Insets(10, 10, 10, 10), 20, 0));
        contentPane.setBorder(BorderFactory.createTitledBorder(null, "Convertor", TitledBorder.CENTER, TitledBorder.DEFAULT_POSITION, this.$$$getFont$$$("SansSerif", -1, 22, contentPane.getFont())));
        final JScrollPane scrollPane1 = new JScrollPane();
        contentPane.add(scrollPane1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(300, 200), new Dimension(400, 500), new Dimension(1200, 2000), 0, false));
        textArea1 = new JTextArea();
        textArea1.setEditable(true);
        Font textArea1Font = this.$$$getFont$$$(null, -1, 14, textArea1.getFont());
        if (textArea1Font != null) textArea1.setFont(textArea1Font);
        textArea1.setText("");
        scrollPane1.setViewportView(textArea1);
        final JScrollPane scrollPane2 = new JScrollPane();
        contentPane.add(scrollPane2, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(300, 200), new Dimension(400, 500), new Dimension(1200, 2000), 0, false));
        textArea2 = new JTextArea();
        Font textArea2Font = this.$$$getFont$$$(null, -1, 14, textArea2.getFont());
        if (textArea2Font != null) textArea2.setFont(textArea2Font);
        textArea2.setRows(0);
        textArea2.setText("");
        scrollPane2.setViewportView(textArea2);
        buttonOK = new JButton();
        Font buttonOKFont = this.$$$getFont$$$("Standard Symbols L", -1, 16, buttonOK.getFont());
        if (buttonOKFont != null) buttonOK.setFont(buttonOKFont);
        buttonOK.setHideActionText(false);
        buttonOK.setText("-> convert ->");
        contentPane.add(buttonOK, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}